@namespace("org.ga4gh")
protocol ReferenceGraphTypes {
    
    // The schemas here describe reference structures and reference hierarchies.
    
    // A reference structure is a graph-based representation of a reference
    // genome and a set of common sequence and structural variants. Such a
    // structure consists of a series of "Blocks" of linear DNA sequence. Each
    // block has two ends, a left (or 5') and a right (or 3'). Links called
    // "Adjacencies" connect these ends together. The presence of an adjacency
    // means that, in at least some people's genomes, the connected blocks of
    // sequence come one after the other, in the order and orientation defined
    // by the ends that are connected.
    
    // The schema represents Blocks and Adjacencies as edges in a graph. The
    // vertices of this graph are unique (but not necessarily permanent) 64-bit
    // integer (Long) IDs, which serve only as meeting points for edges, and the
    // edges are represented by Edge objects, which may belong to either Blocks
    // or Adjacencies. An Edge is directed; it has a left and a right endpoint.
    // In addition to the IDs of its two endpoints, each Edge has its own
    // unique 64-bit integer ID to support annotation of the graph.
    
    // TODO: What if we have to break up a Block? What happens to annotations?
    
    // Every DNA base in a block (called a Position, but not represented as a
    // first-class object in this schema) has a unique, permanent 64-bit integer
    // identifier. Each Block stores the identifier of the first base in it and
    // the total length, and all the bases in a block must have sequential
    // identifiers. Blocks also store the sequence string for the bases they
    // represent, when read along the forward strand from left to right.
    
    // For referring to positions, we define a "Face", which is an enumerated
    // type with values "LEFT" and RIGHT", and we define "Sides" which are
    // combinations of a Position (i.e. base) ID and a Face. A Side represents
    // the specified Face of the specified Position. For example:
    
    //                                                                          
    //                                                                          
    //                                                                          
    //              Side: (#1, LEFT)                                            
    //                \                                                         
    //                 \          Side: (#2, RIGHT)                             
    //                  \           /                                           
    //                   \         /                                            
    //                     +---+---+---+---+                                    
    //     A Block:        |#1 |#2 |#3 |#4 | \                                  
    //                     | A | C | C | G |  \                                 
    //                     +---+---+---+---+   \                                
    //                             /             Side: (#4, RIGHT)              
    //                            /                                             
    //                         Side: (#3, LEFT)                                 
    //                                                                          
    //                                                                          
    //                                                                          
                                                                                
    // This schema also defines Generalizations, which are used to describe how
    // the bases in one reference structure can be merged to produce another
    // reference structure at a higher level in a reference hierarchy. Each
    // Generalization says that each base in a certain contiguous block of bases
    // on the lower level (starting at the specified Position and continuing
    // from left to right for the specified length) is merged into the
    // corresponding base on the higher level, starting at the specified
    // Position and continuing forward along the specified strand. If the
    // specified strand is the reverse strand (i.e. Face RIGHT), corresponding
    // Positions are merged in in a backwards relative orientation; otherwise
    // they are merged in in a forwards relative orientation.
    
    
    record Edge {
        // Represents an edge in the reference graph. Can be part of a Block or
        // Adjacency.
        
        // A unique ID for the Edge
        union { null, long } id = null;
        
        // The ID of the 5' side of the Edge. These vertex IDs are just meeting
        // points for edges; vertices don't need any particular annotations.
        long left;

        // The ID of the 3' side of the Edge.
        long right;

    }
     
    record Block {
        // Represents several Positions with sequential IDs, connected only to
        // each other.
        
        // What is the ID (coordinate) of the first position in this Block?
        long start;
        // How long does it run? A single block can't be longer than a 32-bit
        // int can represent.
        int length;


        // The Edge in the graph that represents this Block.
        Edge edge;
        
        // The base that this Block represents.
        string bases;      
        
    }
    
    record Adjacency {
        // Represents an Adjacency between two sides of two Blocks.

        // The Edge in the graph that represents this Adjacency.
        Edge edge;
    }
    
    enum Face {
        // Keeps track of whether we are talking about the left (5') or right
        // (3') side of a base.
        LEFT,
        RIGHT
    }
    
    // Coordinates are longs that identify Positions. They don't need schemas.
    
    record Side {
        // Identifies a side of a unique Position.
        
        // What is the ID of the position we are talking about?
        long coordinate;
        
        // What face of that position are we talking about (left or right)? 
        Face face; 
    }
    
    record Generalization {
        // Connects a run of bases at one level in a reference hierarchy with a
        // run of bases that they merge into at a higher level. Each base in the
        // lower block is merged into the corresponding base in the higher
        // block.
        
        // What coordinate do we start at on the lower level? We always go out
        // to the right from here.
        long lowerStart;
        // What coordinate do we start at on the upper level? We go out either
        // left or right from here depending on the face here. If we run left
        // to right we merge bases in the forward orientation, and if we run
        // right to left we merge in the reverse orientation.
        Side upperStart;
        // How many Positions do we run for?
        int length;
    }
}
